import { WebClient } from '@slack/web-api';
import { format, subDays, subHours } from 'date-fns';

const client = new WebClient(process.env.SLACK_BOT_TOKEN);
const CHANNEL_ID = process.env.SLACK_CHANNEL_ID || '#ai„Éã„É•„Éº„Çπ';
const TZ = 'Asia/Tokyo';

// AIÈñ¢ÈÄ£„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ
const AI_KEYWORDS = [
  'AI', 'artificial intelligence', 'machine learning', 'deep learning',
  'GPT', 'ChatGPT', 'Claude', 'Gemini', 'OpenAI', 'Anthropic', 'Google AI',
  'neural network', 'LLM', 'large language model', 'generative AI',
  'computer vision', 'NLP', 'natural language processing',
  'robotics', 'automation', 'AI tool', 'AI update', 'AI feature'
];

// RSS„Éï„Ç£„Éº„Éâ„Å®API„ÅÆ„ÇΩ„Éº„Çπ
const NEWS_SOURCES = [
  {
    name: 'TechCrunch AI',
    url: 'https://techcrunch.com/category/artificial-intelligence/feed/',
    type: 'rss'
  },
  {
    name: 'The Verge AI',
    url: 'https://www.theverge.com/ai-artificial-intelligence/rss/index.xml',
    type: 'rss'
  },
  {
    name: 'MIT Technology Review AI',
    url: 'https://www.technologyreview.com/topic/artificial-intelligence/feed/',
    type: 'rss'
  },
  {
    name: 'Ars Technica AI',
    url: 'https://feeds.arstechnica.com/arstechnica/index/',
    type: 'rss'
  },
  {
    name: 'VentureBeat AI',
    url: 'https://venturebeat.com/ai/feed/',
    type: 'rss'
  }
];

// RSS„Éï„Ç£„Éº„Éâ„Çí„Éë„Éº„Çπ„Åô„ÇãÈñ¢Êï∞
async function parseRSS(url) {
  try {
    const response = await fetch(url);
    const xml = await response.text();
    
    // Á∞°Âçò„Å™XML„Éë„Éº„ÇπÔºàÂÆüÈöõ„ÅÆ„Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥„Åß„ÅØxml2js„Å™„Å©„ÅÆ„É©„Ç§„Éñ„É©„É™„Çí‰ΩøÁî®Êé®Â•®Ôºâ
    const items = [];
    const itemRegex = /<item>([\s\S]*?)<\/item>/g;
    let match;
    
    while ((match = itemRegex.exec(xml)) !== null) {
      const itemXml = match[1];
      const titleMatch = itemXml.match(/<title><!\[CDATA\[(.*?)\]\]><\/title>|<title>(.*?)<\/title>/);
      const linkMatch = itemXml.match(/<link>(.*?)<\/link>/);
      const pubDateMatch = itemXml.match(/<pubDate>(.*?)<\/pubDate>/);
      const descriptionMatch = itemXml.match(/<description><!\[CDATA\[(.*?)\]\]><\/description>|<description>(.*?)<\/description>/);
      
      if (titleMatch && linkMatch) {
        const title = titleMatch[1] || titleMatch[2];
        const link = linkMatch[1];
        const pubDate = pubDateMatch ? new Date(pubDateMatch[1]) : new Date();
        const description = descriptionMatch ? (descriptionMatch[1] || descriptionMatch[2]) : '';
        
        items.push({
          title: title.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&'),
          link: link.trim(),
          pubDate,
          description: description.replace(/<[^>]*>/g, '').substring(0, 200)
        });
      }
    }
    
    return items;
  } catch (error) {
    console.error(`Error parsing RSS feed ${url}:`, error);
    return [];
  }
}

// „Éã„É•„Éº„Çπ„ÅåAIÈñ¢ÈÄ£„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆö
function isAIRelated(title, description) {
  const text = `${title} ${description}`.toLowerCase();
  return AI_KEYWORDS.some(keyword => text.includes(keyword.toLowerCase()));
}

// ÊôÇÈñìÁØÑÂõ≤ÂÜÖ„ÅÆ„Éã„É•„Éº„Çπ„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
function filterNewsByTime(newsItems, hoursBack = 24) {
  const now = new Date();
  const cutoffTime = new Date(now.getTime() - (hoursBack * 60 * 60 * 1000));
  
  return newsItems.filter(item => {
    const pubDate = new Date(item.pubDate);
    return pubDate >= cutoffTime;
  });
}

// „Éã„É•„Éº„Çπ„ÇíÈñ¢ÈÄ£ÊÄß„Åß„Çπ„Ç≥„Ç¢„É™„É≥„Ç∞
function scoreNews(newsItem) {
  let score = 0;
  const text = `${newsItem.title} ${newsItem.description}`.toLowerCase();
  
  // ÈáçË¶Å„Å™„Ç≠„Éº„ÉØ„Éº„Éâ„Å´È´ò„ÅÑ„Çπ„Ç≥„Ç¢
  const importantKeywords = ['openai', 'chatgpt', 'claude', 'gemini', 'update', 'release', 'new feature', 'breakthrough'];
  importantKeywords.forEach(keyword => {
    if (text.includes(keyword)) score += 10;
  });
  
  // ‰∏ÄËà¨ÁöÑ„Å™AI„Ç≠„Éº„ÉØ„Éº„Éâ
  AI_KEYWORDS.forEach(keyword => {
    if (text.includes(keyword.toLowerCase())) score += 2;
  });
  
  // „Çø„Ç§„Éà„É´„Å´Âê´„Åæ„Çå„ÇãÂ†¥Âêà„ÅØ„Éú„Éº„Éä„Çπ
  if (newsItem.title.toLowerCase().includes('ai')) score += 5;
  
  return score;
}

// „Éã„É•„Éº„Çπ„ÇíÂèñÂæó„Åô„Çã„É°„Ç§„É≥Èñ¢Êï∞
async function fetchAINews() {
  console.log('Fetching AI news...');
  
  const allNews = [];
  
  // RSS„Éï„Ç£„Éº„Éâ„Åã„Çâ„Éã„É•„Éº„Çπ„ÇíÂèñÂæó
  for (const source of NEWS_SOURCES) {
    if (source.type === 'rss') {
      console.log(`Fetching from ${source.name}...`);
      const items = await parseRSS(source.url);
      
      items.forEach(item => {
        if (isAIRelated(item.title, item.description)) {
          allNews.push({
            ...item,
            source: source.name,
            score: scoreNews(item)
          });
        }
      });
    }
  }
  
  // ÊôÇÈñìÁØÑÂõ≤„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞ÔºàÈÅéÂéª24ÊôÇÈñìÔºâ
  const recentNews = filterNewsByTime(allNews, 24);
  
  // „Çπ„Ç≥„Ç¢È†Ü„Åß„ÇΩ„Éº„Éà
  recentNews.sort((a, b) => b.score - a.score);
  
  // „Éà„ÉÉ„Éó3„ÇíËøî„Åô
  return recentNews.slice(0, 3);
}

// Slack„Å´„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°
async function sendToSlack(newsItems) {
  if (newsItems.length === 0) {
    const message = {
      channel: CHANNEL_ID,
      text: "ü§ñ AI„Éã„É•„Éº„Çπ„Åæ„Å®„ÇÅ",
      blocks: [
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: `*ü§ñ ${format(new Date(), 'yyyyÂπ¥MMÊúàddÊó•')} AI„Éã„É•„Éº„Çπ„Åæ„Å®„ÇÅ*\n\nÈÅéÂéª24ÊôÇÈñì„ÅßÁâπ„Å´Ê≥®ÁõÆ„Åô„Åπ„ÅçAIÈñ¢ÈÄ£„ÅÆ„Éã„É•„Éº„Çπ„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ`
          }
        }
      ]
    };
    
    await client.chat.postMessage(message);
    return;
  }
  
  const blocks = [
    {
      type: "header",
      text: {
        type: "plain_text",
        text: `ü§ñ ${format(new Date(), 'yyyyÂπ¥MMÊúàddÊó•')} AI„Éã„É•„Éº„Çπ„Åæ„Å®„ÇÅ`
      }
    },
    {
      type: "divider"
    }
  ];
  
  newsItems.forEach((news, index) => {
    blocks.push({
      type: "section",
      text: {
        type: "mrkdwn",
        text: `*${index + 1}. ${news.title}*\n${news.description}\n<${news.link}|Ë®ò‰∫ã„ÇíË™≠„ÇÄ> | üì∞ ${news.source}`
      }
    });
    
    if (index < newsItems.length - 1) {
      blocks.push({
        type: "divider"
      });
    }
  });
  
  const message = {
    channel: CHANNEL_ID,
    text: `AI„Éã„É•„Éº„Çπ„Åæ„Å®„ÇÅ - ${format(new Date(), 'yyyyÂπ¥MMÊúàddÊó•')}`,
    blocks: blocks
  };
  
  try {
    await client.chat.postMessage(message);
    console.log('Successfully sent AI news to Slack');
  } catch (error) {
    console.error('Error sending message to Slack:', error);
  }
}

// „É°„Ç§„É≥ÂÆüË°åÈñ¢Êï∞
async function main() {
  try {
    console.log('Starting AI news collection...');
    const newsItems = await fetchAINews();
    console.log(`Found ${newsItems.length} relevant AI news items`);
    
    await sendToSlack(newsItems);
    console.log('AI news delivery completed');
  } catch (error) {
    console.error('Error in main execution:', error);
    
    // „Ç®„É©„ÉºÊôÇ„Å´„ÇÇSlack„Å´ÈÄöÁü•
    try {
      await client.chat.postMessage({
        channel: CHANNEL_ID,
        text: `‚ö†Ô∏è AI„Éã„É•„Éº„ÇπÂèñÂæó„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}`
      });
    } catch (slackError) {
      console.error('Error sending error message to Slack:', slackError);
    }
  }
}

// „Çπ„ÇØ„É™„Éó„Éà„ÅåÁõ¥Êé•ÂÆüË°å„Åï„Çå„ÅüÂ†¥Âêà„ÅÆ„Åømain„ÇíÂÆüË°å
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { main, fetchAINews, sendToSlack };
